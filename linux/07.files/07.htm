<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0063)http://man.chinaunix.net/develop/c&c++/linux_c/function/07.html -->
<HTML><HEAD><TITLE>Untitled Document</TITLE>
<META http-equiv=Content-Type content="text/html; charset=utf-8">
<META content="MSHTML 6.00.2900.2180" name=GENERATOR></HEAD>
  <BODY><A target = "_top" href="../../">&lt;&lt; 返回博客首页 
</A><BR><BR>
<TABLE width="100%">
  <TBODY>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc90></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>endgrent（关闭组文件） 
  </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
  size=2>getgrent，setgrent<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;grp.h&gt;<BR>#include&lt;sys/types.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>void 
    endgrent(void);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>endgrent()用来关闭由getgrent()所打开的密码文件。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>附加说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>范例 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>请参考getgrent()与setgrent()。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc91></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>endpwent（关闭密码文件） 
  </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
  size=2>getpwent，setpwent<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;pwd.h&gt;<BR>#include&lt;sys/types.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>void 
    endpwent(void);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>endpwent()用来关闭由getpwent()所打开的密码文件。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>附加说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>范例 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>请参考getpwent()与setpwent()。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc92></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>endutent（关闭utmp 文件） 
    </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
  size=2>getutent，setutent<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;utmp.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>void 
    endutent(void);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>endutent()用来关闭由getutent所打开的utmp文件。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>附加说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>范例 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>请参考getutent()。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc93></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>fgetgrent（从指定的文件来读取组格式） 
      </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>fgetpwent<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;grp.h&gt;<BR>#include&lt;stdio.h&gt;<BR>#include&lt;sys/types.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>struct group * getgrent(FILE * 
      stream);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>fgetgrent()会从参数stream指定的文件读取一行数据，然后以group结构将该数据返回。参数stream所指定的文件必须和、etc/group相同的格式。group结构定义请参考getgrent()。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>返回group结构数据，如果返回NULL则表示已无数据，或有错误发生。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>范例 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>#include 
      &lt;grp.h&gt;<BR>#include&lt;sys/types.h&gt;<BR>#include&lt;stdio.h&gt;<BR>main()<BR>{<BR>struct 
      group *data;<BR>FILE *stream;<BR>int i;<BR>stream = fopen("/etc/group", 
      "r");<BR>while((data = fgetgrent(stream))!=0){<BR>i=0;<BR>printf("%s 
      :%s:%d :", data-&gt;gr_name,data-&gt;gr_passwd,data-&gt;gr_gid);<BR>while 
      (data-&gt;gr_mem[i])printf("%s,",data-&gt;gr_mem[i++]);<BR>printf("\n");<BR>}<BR>fclose(stream);<BR>}<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>执行 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>root:x:0:root,<BR>bin:x:1:root,bin,daemon<BR>daemon:x:2:root,bin,daemon<BR>sys:x:3:root,bin,adm<BR>adm:x:4:root,adm,daemon<BR>tty:x:5<BR>disk:x:6:root<BR>lp:x:7:daemon,lp<BR>mem:x:8<BR>kmem:x:9<BR>wheel:x:10:root<BR>mail:x:12:mail<BR>news:x:13:news<BR>uucp:x:14:uucp<BR>man:x:15<BR>games:x:20<BR>gopher:x:30<BR>dip:x:40:<BR>ftp:x:50<BR>nobody:x:99:<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc94></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>fgetpwent（从指定的文件来读取密码格式） 
      </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>fgetgrent<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;pwd.h&gt;<BR>#include&lt;stdio.h&gt;<BR>#include&lt;sys/types.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>struct passwd * fgetpwent(FILE 
      *stream);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>fgetpwent()会从参数stream指定的文件读取一行数据，然后以passwd结构将该数据返回。参数stream所指定的文件必须和/etc/passwd相同的格式。passwd结构定义请参考getpwent()。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>返回passwd结构数据，如果返回NULL则表示已无数据，或有错误发生。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>范例 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;pwd.h&gt;<BR>#include&lt;sys/types.h&gt;<BR>main()<BR>{<BR>struct 
      passwd *user;<BR>FILE *stream;<BR>stream = fopen("/etc/passwd", 
      "r");<BR>while((user = 
      fgetpwent(stream))!=0){<BR>printf("%s:%d:%d:%s:%s:%s\n",user-&gt;pw_name,user-&gt;pw_uid,user-&gt;pw_gid,user-&gt;pw_gecos,user-&gt;pw_dir,user-&gt;pw_shell);<BR>}<BR>}<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>执行 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>root:0:0:root:/root:/bin/bash<BR>bin:1:1:bin:/bin:<BR>daemon:2:2:daemon:/sbin:<BR>adm:3:4:adm:/var/adm:<BR>lp:4:7:lp:/var/spool/lpd:<BR>sync:5:0:sync:/sbin:/bin/sync<BR>shutdown:6:0:shutdown:/sbin:/sbin/shutdown<BR>halt:7:0:halt:/sbin:/sbin/halt<BR>mail:8:12:mail:/var/spool/mail:<BR>news:9:13:news:var/spool/news<BR>uucp:10:14:uucp:/var/spool/uucp:<BR>operator:11:0:operator 
      :/root:<BR>games:12:100:games:/usr/games:<BR>gopher:13:30:gopher:/usr/lib/gopher-data:<BR>ftp:14:50:FTP 
      User:/home/ftp:<BR>nobody:99:99:Nobody:/:<BR>xfs:100:101:X Font Server: 
      /etc/Xll/fs:/bin/false<BR>gdm:42:42:/home/gdm:/bin/bash<BR>kids:500:500: : 
      /home/kids:/bin/bash<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc95></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>getegid（取得有效的组识别码） 
    </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getgid，setgid，setregid<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;unistd.h&gt;<BR>#include&lt;sys/types.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>gid_t 
    getegid(void);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getegid()用来取得执行目前进程有效组识别码。有效的组识别码用来决定进程执行时组的权限。返回值返回有效的组识别码。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>范例 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>main()<BR>{ <BR>printf("egid is 
      %d\n",getegid());<BR>}<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>执行 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>egid is 0 
      /*当使用root身份执行范例程序时*/<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc96></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>geteuid（取得有效的用户识别码） 
    </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getuid，setreuid，setuid<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;unistd.h&gt;<BR>#include&lt;sys/types.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>uid_t 
    geteuid(void)<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>geteuid()用来取得执行目前进程有效的用户识别码。有效的用户识别码用来决定进程执行的权限，借由此改变此值，进程可以获得额外的权限。倘若执行文件的setID位已被设置，该文件执行时，其进程的euid值便会设成该文件所有者的uid。例如，执行文件/usr/bin/passwd的权限为-r-s--x--x，其s 
      位即为setID(SUID)位，而当任何用户在执行passwd 时其有效的用户识别码会被设成passwd 所有者的uid 值，即root的uid 
      值(0)。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>返回有效的用户识别码。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>范例 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>main()<BR>{ <BR>printf ("euid is %d 
      \n",geteuid());<BR>}<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>执行 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>euid is 0 
      /*当使用root身份执行范例程序时*/<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc97></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>getgid（取得真实的组识别码） 
  </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getegid，setregid，setgid<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;unistd.h&gt;<BR>#include&lt;sys/types.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>gid_t 
    getgid(void);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getgid()用来取得执行目前进程的组识别码。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>返回组识别码<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>范例 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>main()<BR>{<BR>printf(“gid is 
      %d\n”,getgid());<BR>}<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>执行 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>gid is 0 
      /*当使用root身份执行范例程序时*/<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc98></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>getgrent（从组文件中取得账号的数据） 
      </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
  size=2>setgrent，endgrent<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>#include&lt;grp.h&gt;<BR>#include 
      &lt;sys/types.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>struct group 
      *getgrent(void);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getgrent()用来从组文件(/etc/group)中读取一项组数据，该数据以group 
      结构返回。第一次调用时会取得第一项组数据，之后每调用一次就会返回下一项数据，直到已无任何数据时返回NULL。<BR>struct 
      group{<BR>char *gr_name; /*组名称*/<BR>char *gr_passwd; /* 组密码*/<BR>gid_t 
      gr_gid; /*组识别码*/<BR>char **gr_mem; /*组成员账号*/<BR>}<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>返回group结构数据，如果返回NULL则表示已无数据，或有错误发生。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>附加说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getgrent()在第一次调用时会打开组文件，读取数据完毕后可使用endgrent()来关闭该组文件。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>错误代码 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>ENOMEM 
      内存不足，无法配置group结构。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>范例 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;grp.h&gt;<BR>#include&lt;sys/types.h&gt;<BR>main()<BR>{<BR>struct 
      group *data;<BR>int i;<BR>while((data= 
      getgrent())!=0){<BR>i=0;<BR>printf(“%s:%s:%d:”,data-&gt;gr_name,data-&gt;gr_passwd,data-&gt;gr_gid);<BR>while(data-&gt;gr_mem[i])printf(“%s,”,data-&gt;gr_mem[i++]);<BR>printf(“\n”);<BR>}<BR>endgrent();<BR>}<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>执行 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>root:x:0:root,<BR>bin:x:1:root,bin,daemon,<BR>daemon:x:2:root,bin,daemon,<BR>sys:x:3:root,bin,adm,<BR>adm:x:4:root,adm,daemon<BR>tty:x:5<BR>disk:x:6:root<BR>lp:x:7:daemon,lp<BR>mem:x:8<BR>kmem:x:9:<BR>wheel:x:10:root<BR>mail:x:12:mail<BR>news:x:13:news<BR>uucp:x:14:uucp<BR>man:x:15:<BR>games:x:20<BR>gopher:x:30<BR>dip:x:40<BR>ftp:x:50<BR>nobody:x:99<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc99></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>getgrgid（从组文件中取得指定gid 的数据） 
      </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>fgetgrent，getgrent，getgrnam<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;grp.h&gt;<BR>#include&lt;sys/types.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>strcut group * getgrgid(gid_t 
      gid);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getgrgid（）用来依参数gid指定的组识别码逐一搜索组文件，找到时便将该组的数据以group结构返回。group结构请参考getgrent（）。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>返回group结构数据，如果返回NULL则表示已无数据，或有错误发生。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>范例 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>/* 
      取得gid＝3的组数据*/<BR>#include&lt;grp.h&gt;<BR>#include&lt;sys/types.h&gt;<BR>main()<BR>{<BR>strcut 
      group *data;<BR>int i=0;<BR>data = 
      getgrgid(3);<BR>printf(“%s:%s:%d:”,data-&gt;gr_name,data-&gt;gr_passwd,data-&gt;gr_gid);<BR>while(data-&gt;gr_mem[i])printf(“%s 
      ,”,data-&gt;mem[i++]);<BR>printf(“\n”);<BR>}<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>执行 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
    size=2>sys:x:3:root,bin,adm<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc100></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>getgrnam（从组文件中取得指定组的数据） 
      </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>fgetgrent，getrent，getgruid<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;grp.h&gt;<BR>#include&lt;sys/types.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>strcut group * getgrnam(const char * 
      name);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getgrnam（）用来逐一搜索参数那么指定的组名称，找到时便将该组的数据以group结构返回。group 
      结构请参考getgrent（）。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>返回group结构数据，如果返回NULL则表示已无数据，或有错误发生。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>范例 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>/* 
      取得adm的组数据*/<BR>#include&lt;grp.h&gt;<BR>#include&lt;sys/types.h&gt;<BR>main()<BR>{<BR>strcut 
      group * data;<BR>int i=0;<BR>data = 
      getgrnam(“adm”);<BR>printf(“%s:%s:%d:”,data-&gt;gr_name,data-&gt;gr_passwd,data-&gt;gr_gid);<BR>while(data-&gt;gr_mem[i])printf(“%s,”,data-&gt;gr_mem[i++]);<BR>printf(“\n”);<BR>}<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>执行 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>adm:x:4:root,adm,daemon<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc101></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>getgroups（取得组代码） 
  </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>initgroups，setgroup，getgid，setgid<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;unistd.h&gt;<BR>#include&lt;sys/types.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>int getgroups(int size,gid_t 
      list[]);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getgroup（）用来取得目前用户所属的组代码。参数size为list〔〕所能容纳的gid_t 数目。如果参数size 
      值为零，此函数仅会返回用户所属的组数。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
  size=2>返回组识别码，如有错误则返回-1。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>错误代码 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>EFAULT 参数list数组地址不合法。EINVAL 
      参数size值不足以容纳所有的组。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>范例 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;unistd.h&gt;<BR>#include&lt;sys/types.h&gt;<BR>main()<BR>{<BR>gid_t 
      list[500];<BR>int x,i;<BR>x = 
      getgroups(0.list);<BR>getgroups(x,list);<BR>for(i=0;i&lt;x;i++)<BR>printf(“%d:%d\n”,i,list[i]);<BR>}<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>执行 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>0:00<BR>1:01<BR>2:02<BR>3:03<BR>4:04<BR>5:06<BR>6:10<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc102></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>getpw（取得指定用户的密码文件数据） 
    </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>getpwent<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;pwd.h&gt;<BR>#include&lt;sys/types.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>int getpw(uid_t uid,char 
      *buf);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getpw()会从/etc/passwd中查找符合参数uid所指定的用户账号数据，找不到相关数据就返回-1。所返回的buf字符串格式如下:账号:密码:用户识别码(uid):组识别码(gid):全名:根目录:shell<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
    size=2>返回0表示成功，有错误发生时返回-1。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>附加说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>1. 
      getpw()会有潜在的安全性问题，请尽量使用别的函数取代。<BR>2. 
      使用shadow的系统已把用户密码抽出/etc/passwd，因此使用getpw()取得的密码将为“x”。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>范例 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;pwd.h&gt;<BR>#include&lt;sys/types.h&gt;<BR>main()<BR>{<BR>char 
      buffer[80];<BR>getpw(0,buffer);<BR>printf(“%s\n”,buffer);<BR>}<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>执行 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>root:x:0:0:root:/root:/bin/bash<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc103></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>getpwent（从密码文件中取得账号的数据） 
      </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getpw，fgetpwent，getpwnam，getpwuid，setpwent，endpwent<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;pwd.h&gt;<BR>#include&lt;sys/types.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>strcut passwd * 
      getpwent(void);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getpwent（）用来从密码文件（/etc/passwd）中读取一项用户数据，该用户的数据以passwd 
      结构返回。第一次调用时会取得第一位用户数据，之后每调用一次就会返回下一项数据，直到已无任何数据时返回NULL。<BR>passwd 
      结构定义如下<BR>struct passwd{<BR>char * pw_name; /*用户账号*/<BR>char * pw_passwd; 
      /*用户密码*/<BR>uid_t pw_uid; /*用户识别码*/<BR>gid_t pw_gid; /*组识别码*/<BR>char * 
      pw_gecos; /*用户全名*/<BR>char * pw_dir; /*家目录*/<BR>char * pw_shell; /* 
      所使用的shell路径*/<BR>};<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>返回passwd 结构数据，如果返回NULL 
      则表示已无数据，或有错误发生。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>附加说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getpwent()在第一次调用时会打开密码文件，读取数据完毕后可使用endpwent()来关闭该密码文件。错误代码ENOMEM 
      内存不足，无法配置passwd结构。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>范例 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;pwd.h&gt;<BR>#include&lt;sys/types.h&gt;<BR>main()<BR>{<BR>struct 
      passwd *user;<BR>while((user = 
      getpwent())!=0){<BR>printf(“%s:%d:%d:%s:%s:%s\n”,user-&gt;pw_name,user-&gt;pw_uid,user-&gt;pw_gid,<BR>user-&gt;pw_gecos,user-&gt;pw_dir,user-&gt;pw_shell);<BR>}<BR>endpwent();<BR>}<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>执行 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>root:0:0:root:/root:/bin/bash<BR>bin:1:1:bin:/bin:<BR>daemon:2:2:daemon:/sbin:<BR>adm:3:4:adm:/var/adm:<BR>lp:4:7:lp:/var/spool/lpd:<BR>sync:5:0:sync:/sbin:/bin/sync<BR>shutdown:6:0:shutdown:/sbin:/sbin/shutdown<BR>halt:7:0:halt:/sbin:/sbin/halt<BR>mail:8:12:mail:/var/spool/mail:<BR>news:9:13:news:var/spool/news<BR>uucp:10:14:uucp:/var/spool/uucp:<BR>operator:11:0:operator 
      :/root:<BR>games:12:100:games:/usr/games:<BR>gopher:13:30:gopher:/usr/lib/gopher-data:<BR>ftp:14:50:FTP 
      User:/home/ftp:<BR>nobody:99:99:Nobody:/:<BR>xfs:100:101:X Font Server: 
      /etc/Xll/fs:/bin/false<BR>gdm:42:42:/home/gdm:/bin/bash<BR>kids:500:500: : 
      /home/kids:/bin/bash<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc104></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>getpwnam（从密码文件中取得指定账号的数据） 
      </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getpw，fgetpwent，getpwent，getpwuid<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;pwd.h&gt;<BR>#include&lt;sys/types.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>struct passwd * getpwnam(const char * 
      name);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>getpwnam()用来逐一搜索参数name 
      指定的账号名称，找到时便将该用户的数据以passwd结构返回。passwd结构请参考getpwent()。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>返回passwd 结构数据，如果返回NULL 
      则表示已无数据，或有错误发生。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>范例 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>/*取得root账号的识别码和根目录*/<BR>#include&lt;pwd.h&gt;<BR>#include&lt;sys/types.h&gt;<BR>main()<BR>{<BR>struct 
      passwd *user;<BR>user = 
      getpwnam(“root”);<BR>printf(“name:%s\n”,user-&gt;pw_name);<BR>printf(“uid:%d\n”,user-&gt;pw_uid);<BR>printf(“home:%s\n”,user-&gt;pw_dir);<BR>}<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>执行 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>name:root<BR>uid:0<BR>home:/root<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc105></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>getpwuid（从密码文件中取得指定uid 的数据） 
      </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getpw，fgetpwent，getpwent，getpwnam<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;pwd.h&gt;<BR>#include&lt;sys/types.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>struct passwd * getpwuid(uid_t 
      uid);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>getpwuid()用来逐一搜索参数uid 
      指定的用户识别码，找到时便将该用户的数据以结构返回结构请参考将该用户的数据以passwd 结构返回。passwd 
      结构请参考getpwent()。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>返回passwd 结构数据，如果返回NULL 
      则表示已无数据，或者有错误发生。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>范例 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;pwd.h&gt;<BR>#include&lt;sys/types.h&gt;<BR>main()<BR>{<BR>struct 
      passwd *user;<BR>user= 
      getpwuid(6);<BR>printf(“name:%s\n”,user-&gt;pw_name);<BR>printf(“uid:%d\n”,user-&gt;pw_uid);<BR>printf(“home:%s\n”,user-&gt;pw_dir);<BR>}<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>执行 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>name:shutdown<BR>uid:6<BR>home:/sbin<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc106></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>getuid（取得真实的用户识别码） 
    </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>geteuid，setreuid，setuid<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;unistd.h&gt;<BR>#include&lt;sys/types.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>uid_t 
    getuid(void);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getuid()用来取得执行目前进程的用户识别码。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>用户识别码<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>范例 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>main()<BR>{ <BR>printf(“uid is 
      %d\n”,getuid());<BR>}<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>执行 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>uid is 0 
      /*当使用root身份执行范例程序时*/<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc107></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>getutent（从utmp 文件中取得账号登录数据） 
      </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getutent，getutid，getutline，setutent，endutent，pututline，utmpname<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;utmp.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>struct utmp 
      *getutent(void);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>getutent()用来从utmp 
      文件(/var/run/utmp)中读取一项登录数据，该数据以utmp 
      结构返回。第一次调用时会取得第一位用户数据，之后每调用一次就会返回下一项数据，直到已无任何数据时返回NULL。<BR>utmp结构定义如下<BR>struct 
      utmp<BR>{<BR>short int ut_type; /*登录类型*/<BR>pid_t ut_pid; 
      /*login进程的pid*/<BR>char ut_line[UT_LINESIZE];/*登录装置名，省略了“/dev/”*/<BR>char 
      ut_id[4]; /* Inittab ID*/<BR>char ut_user[UT_NAMESIZE];/*登录账号*/<BR>char 
      ut_host[UT_HOSTSIZE];/*登录账号的远程主机名称*/<BR>struxt exit_status ut_exit;/* 
      当类型为DEAD_PROCESS时进程的结<BR>束状态*/<BR>long int ut_session; /*Sessioc 
      ID*/<BR>struct timeval ut_tv; /*时间记录*/<BR>int32_t ut_addr_v6[4]; 
      /*远程主机的网络地址*/<BR>char __unused[20]; /* 
      保留未使用*/<BR>};<BR>ut_type有以下几种类型:<BR>EMPTY 此为空的记录。<BR>RUN_LVL 
      记录系统run－level的改变<BR>BOOT_TIME 记录系统开机时间<BR>NEW_TIME 
      记录系统时间改变后的时间<BR>OLD_TINE 记录当改变系统时间时的时间。<BR>INIT_PROCESS 
      记录一个由init衍生出来的进程。<BR>LOGIN_PROCESS 记录login进程。<BR>USER_PROCESS 
      记录一般进程。<BR>DEAD_PROCESS 记录一结束的进程。<BR>ACCOUNTING 
      目前尚未使用。<BR>exit_status结构定义<BR>struct exit_status<BR>{<BR>short int 
      e_termination; /*进程结束状态*/<BR>short int e_exit; 
      /*进程退出状态*/<BR>};<BR>timeval的结构定义请参考gettimeofday（）。<BR>相关常数定义如下:<BR>UT_LINESIZE 
      32<BR>UT_NAMESIZE 32<BR>UT_HOSTSIZE 256<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>返回utmp 结构数据，如果返回NULL 
      则表示已无数据，或有错误发生。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>附加说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>getutent()在第一次调用时会打开utmp 
      文件，读取数据完毕后可使用endutent()来关闭该utmp文件。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>范例 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;utmp.h&gt;<BR>main()<BR>{<BR>struct utmp 
      *u;<BR>while((u=getutent())){<BR>if(u-&gt;ut_type = = 
      USER_PROCESS)<BR>printf(“%d %s %s %s 
      \n”,u-&gt;ut_type,u-&gt;ut_user,u-&gt;ut_line,u-&gt;ut_host);<BR>}<BR>endutent();<BR>}<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>执行 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>/* 
      表示有三个root账号分别登录/dev/pts/0，/dev/pts/1，/dev/pts/2 */<BR>7 root pts/0<BR>7 
      root pts/1<BR>7 root pts/2<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc108></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>getutid（从utmp 文件中查找特定的记录） 
      </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
  size=2>getutent，getutline<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;utmp.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>strcut utmp *getutid(strcut utmp 
      *ut);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>getutid()用来从目前utmp 
      文件的读写位置逐一往后搜索参数ut指定的记录，如果ut-&gt;ut_type 
      为RUN_LVL，BOOT_TIME，NEW_TIME，OLD_TIME 其中之一则查找与ut-&gt;ut_type 
      相符的记录；若ut-&gt;ut_type 
      为INIT_PROCESS，LOGIN_PROCESS，USER_PROCESS或DEAD_PROCESS其中之一，则查找与ut-&gt;ut_id相符的记录。找到相符的记录便将该数据以utmp 
      结构返回。utmp结构请参考getutent()。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>返回utmp 结构数据，如果返回NULL 
      则表示已无数据，或有错误发生。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>范例 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;utmp.h&gt;<BR>main()<BR>{<BR>struct utmp 
      ut,*u;<BR>ut.ut_type=RUN_LVL;<BR>while((u= 
      getutid(&amp;ut))){<BR>printf(“%d %s %s 
      %s\n”,u-&gt;ut_type,u-&gt;ut_user,u-&gt;ut_line,u-&gt;ut_host);<BR>}<BR>}<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>执行 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>1 runlevel -<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc109></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>getutline（从utmp 文件中查找特定的记录） 
      </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getutent，getutid，pututline<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;utmp.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>struct utmp * getutline (struct utmp 
      *ut);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getutline()用来从目前utmp文件的读写位置逐一往后搜索ut_type为USER_PROCESS 
      或LOGIN_PROCESS 的记录，而且ut_line 和ut-&gt;ut_line 相符。找到相符的记录便将该数据以utmp 
      结构返回，utmp结构请参考getutent()。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>返回utmp 结构数据，如果返回NULL 
      则表示已无数据，或有错误发生。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>范例 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;utmp.h&gt;<BR>main()<BR>{<BR>struct utmp 
      ut,*u;<BR>strcpy (ut.ut_line,”pts/1”);<BR>while 
      ((u=getutline(&amp;ut))){<BR>printf(“%d %s %s %s 
      \n”,u-&gt;ut_type,u-&gt;ut_user,u-&gt;ut_line,u-&gt;ut_host);<BR>}<BR>}<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>执行 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>7 root pts/1<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc110></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>initgroups（初始化组清单） 
    </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
  size=2>setgrent，endgrent<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;grp.h&gt;<BR>#include&lt;sys/types.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>int initgroups(const char *user,gid_t 
      group);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>initgroups（）用来从组文件（/etc/group）中读取一项组数据，若该组数据的成员中有参数user时，便将参数group组识别码加入到此数据中。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>执行成功则返回0，失败则返回-1，错误码存于errno。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc111></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>pututline（将utmp 记录写入文件） 
      </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getutent，getutid，getutline<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;utmp.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>void pututline(struct utmp 
      *ut);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>pututline()用来将参数ut的utmp结构记录到utmp文件中。此函数会先用getutid()来取得正确的写入位置，如果没有找到相符的记录则会加入到utmp文件尾，utmp结构请参考getutent()。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>附加说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>需要有写入/var/run/utmp 
      的权限<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>范例 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;utmp.h&gt;<BR>main()<BR>{<BR>struct utmp 
      ut;<BR>ut.ut_type 
      =USER_PROCESS;<BR>ut.ut_pid=getpid();<BR>strcpy(ut.ut_user,”kids”);<BR>strcpy(ut.ut_line,”pts/1”);<BR>strcpy(ut.ut_host,”www.gnu.org”);<BR>pututline(&amp;ut);<BR>}<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>执行 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>/*执行范例后用指令who -l 观察*/<BR>root pts/0 
      dec9 19:20<BR>kids pts/1 dec12 10:31(www.gnu.org)<BR>root pts/2 dec12 
      13:33<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc112></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>seteuid（设置有效的用户识别码） 
    </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>setuid，setreuid，setfsuid<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;unistd.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>int seteuid(uid_t 
      euid);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>seteuid()用来重新设置执行目前进程的有效用户识别码。在Linux下，seteuid(euid)相当于setreuid(-1,euid)。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>执行成功则返回0，失败则返回-1，错误代码存于errno<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>附加说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>请参考setuid<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc113></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>setfsgid（设置文件系统的组识别码） 
      </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>setuid，setreuid，seteuid，setfsuid<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;unistd.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>int setfsgid(uid_t 
      fsgid);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>setfsgid()用来重新设置目前进程的文件系统的组识别码。一般情况下，文件系统的组识别码(fsgid)与有效的组识别码(egid)是相同的。如果是超级用户调用此函数，参数fsgid 
      可以为任何值，否则参数fsgid必须为real/effective/saved的组识别码之一。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>执行成功则返回0，失败则返回-1，错误代码存于errno。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>附加说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>此函数为Linux特有。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>错误代码 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>EPERM 
  权限不够，无法完成设置。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc114></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>setfsuid（设置文件系统的用户识别码） 
      </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>setuid，setreuid，seteuid，setfsgid<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;unistd.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>int setfsuid(uid_t 
      fsuid);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>setfsuid()用来重新设置目前进程的文件系统的用户识别码。一般情况下，文件系统的用户识别码(fsuid)与有效的用户识别码(euid)是相同的。如果是超级用户调用此函数，参数fsuid可以为任何值，否则参数fsuid必须为real/effective/saved的用户识别码之一。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>执行成功则返回0，失败则返回-1，错误代码存于errno<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>附加说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>此函数为Linux特有<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>错误代码 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>EPERM 
  权限不够，无法完成设置。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc115></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>setgid（设置真实的组识别码） 
  </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getgid，setregid，getegid，setegid<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;unistd.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>int setgid(gid_t 
      gid);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>setgid()用来将目前进程的真实组识别码(real 
      gid)设成参数gid值。如果是以超级用户身份执行此调用，则real、effective与savedgid都会设成参数gid。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>设置成功则返回0，失败则返回-1，错误代码存于errno中。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>错误代码 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>EPERM 并非以超级用户身份调用，而且参数gid 
      并非进程的effective gid或saved gid值之一。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc116></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>setgrent（从头读取组文件中的组数据） 
      </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
  size=2>getgrent，endgrent<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;grp.h&gt;<BR>#include&lt;sys/types.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>void 
    setgrent(void);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>setgrent()用来将getgrent()的读写地址指回组文件开头。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>附加说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>请参考setpwent()。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc117></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>setgroups（设置组代码） 
  </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>initgroups，getgroup，getgid，setgid<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
    size=2>#include&lt;grp.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>int setgroups(size_t size,const gid_t 
      * list);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>setgroups()用来将list 
      数组中所标明的组加入到目前进程的组设置中。参数size为list()的gid_t数目，最大值为NGROUP(32)。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
    size=2>设置成功则返回0，如有错误则返回-1。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>错误代码 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>EFAULT 参数list数组地址不合法。<BR>EPERM 
      权限不足，必须是root权限<BR>EINVAL 参数size值大于NGROUP(32)。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc118></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>setpwent（从头读取密码文件中的账号数据） 
      </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
  size=2>getpwent，endpwent<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;pwd.h&gt;<BR>#include&lt;sys/types.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>void 
    setpwent(void);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>setpwent()用来将getpwent()的读写地址指回密码文件开头。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>范例 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;pwd.h&gt;<BR>#include&lt;sys/types.h&gt;<BR>main()<BR>{<BR>struct 
      passwd *user;<BR>int 
      i;<BR>for(i=0;i&lt;4;i++){<BR>user=getpwent();<BR>printf(“%s :%d :%d 
      :%s:%s:%s\n”,user-&gt;pw_name,user-&gt;pw_uid,user-&gt;pw_gid,<BR>user-&gt;pw_gecos,user-&gt;pw_dir,user-&gt;pw_shell);<BR>}<BR>setpwent();<BR>user=getpwent();<BR>printf(“%s 
      :%d :%d 
      :%s:%s:%s\n”,user-&gt;pw_name,user-&gt;pw_uid,user-&gt;pw_gid,<BR>user-&gt;pw_gecos,user-&gt;pw_dir,user-&gt;pw_shell);<BR>endpwent();<BR>}<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>执行 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>root:0:0:root:/root:/bin/bash<BR>bin:1:1:bin:/bin<BR>daemon:2:2:daemon:/sbin<BR>adm:3:4:adm:/var/adm<BR>root:0:0:root:/root:/bin/bash<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc119></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>setregid（设置真实及有效的组识别码） 
      </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>setgid，setegid，setfsgid<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;unistd.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>int setregid(gid_t rgid,gid_t 
      egid);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>setregid()用来将参数rgid设为目前进程的真实组识别码，将参数egid设置为目前进程的有效组识别码。如果参数rgid或egid值为-1，则对应的识别码不会改变。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>执行成功则返回0，失败则返回-1，错误代码存于errno。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc120></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>setreuid（设置真实及有效的用户识别码） 
      </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>setuid，seteuid，setfsuid<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;unistd.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>int setreuid(uid_t ruid,uid_t 
      euid);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>setreuid()用来将参数ruid 
      设为目前进程的真实用户识别码，将参数euid 设置为目前进程的有效用户识别码。如果参数ruid 
      或euid值为-1，则对应的识别码不会改变。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>执行成功则返回0，失败则返回-1，错误代码存于errno。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>附加说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>请参考setuid（）。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc121></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>setuid（设置真实的用户识别码） 
    </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getuid，setreuid，seteuid，setfsuid<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;unistd.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>int setuid(uid_t 
    uid)<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>setuid()用来重新设置执行目前进程的用户识别码。不过，要让此函数有作用，其有效的用户识别码必须为0(root)。在Linux下，当root使用setuid()来变换成其他用户识别码时，root权限会被抛弃，完全转换成该用户身份，也就是说，该进程往后将不再具有可setuid()的权利，如果只是向暂时抛弃root 
      权限，稍后想重新取回权限，则必须使用seteuid()。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>执行成功则返回0，失败则返回-1，错误代码存于errno。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>附加说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>一般在编写具setuid 
      root的程序时，为减少此类程序带来的系统安全风险，在使用完root权限后建议马上执行setuid(getuid());来抛弃root权限。此外，进程uid和euid不一致时Linux系统将不会产生core 
      dump。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc122></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>setutent（从头读取utmp 文件中的登录数据） 
      </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
  size=2>getutent，endutent<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;utmp.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>void 
    setutent(void);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>setutent()用来将getutent()的读写地址指回utmp文件开头。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>附加说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>请参考setpwent()或setgrent()。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR><FONT face=宋体 size=2><A 
      name=linuxc123></A></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2><BR></FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR>utmpname（设置utmp 文件路径） 
      </FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>相关函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>getutent，getutid，getutline，setutent，endutent，pututline<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>表头文件 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>#include&lt;utmp.h&gt;<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>定义函数 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2>void utmpname(const char * 
      file);<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>函数说明 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 
      size=2>utmpname()用来设置utmp文件的路径，以提供utmp相关函数的存取路径。如果没有使用utmpname()则默认utmp文件路径为/var/run/utmp。<BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>
      <DIV align=right><FONT face=宋体 size=2>返回值 </FONT></DIV></TD>
    <TD>
      <DIV align=left><FONT face=宋体 size=2><BR></FONT></DIV></TD></TR>
  <TR>
    <TD vAlign=top width=80>　 
      <DIV align=right><BR></DIV></TD></TR></TBODY></TABLE></BODY></HTML>
